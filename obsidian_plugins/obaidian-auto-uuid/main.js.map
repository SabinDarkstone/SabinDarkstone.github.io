{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["import {\r\n    App,\r\n    Notice,\r\n    Plugin,\r\n    PluginSettingTab,\r\n    Setting,\r\n    TFile\r\n} from \"obsidian\";\r\n\r\ninterface AutoUuidSettings {\r\n    fieldName: string;\r\n    delayMs: number;\r\n    overwriteIfBlank: boolean;\r\n}\r\n\r\nconst DEFAULT_SETTINGS: AutoUuidSettings = {\r\n    fieldName: \"uuid\",\r\n    delayMs: 250,\r\n    overwriteIfBlank: true\r\n};\r\n\r\nfunction generateUuidV4(): string {\r\n    // Prefer native crypto.randomUUID if available\r\n    const g = (globalThis as any);\r\n    if (g?.crypto?.randomUUID) return g.crypto.randomUUID();\r\n\r\n    // Fallback RFC4122 v4\r\n    const rnd = (n: number) => (cryptoRandomBytes(n));\r\n    const b = rnd(16);\r\n    b[6] = (b[6] & 0x0f) | 0x40;\r\n    b[8] = (b[8] & 0x3f) | 0x80;\r\n    const hex = [...b].map((x) => x.toString(16).padStart(2, \"0\"));\r\n    return `${hex[0]}${hex[1]}${hex[2]}${hex[3]}-${hex[4]}${hex[5]}-${hex[6]}${hex[7]}-${hex[8]}${hex[9]}-${hex[10]}${hex[11]}${hex[12]}${hex[13]}${hex[14]}${hex[15]}`;\r\n}\r\n\r\nfunction cryptoRandomBytes(n: number): Uint8Array {\r\n    const out = new Uint8Array(n);\r\n    for (let i = 0; i < n; i++) {\r\n        out[i] = Math.floor(Math.random() * 256);\r\n    }\r\n    return out;\r\n}\r\n\r\nfunction isMarkdown(file: TFile): boolean {\r\n    return file.extension.toLowerCase() === \"md\";\r\n}\r\n\r\nfunction hasYamlFrontmatter(content: string): boolean {\r\n    return content.startsWith(\"---\\n\");\r\n}\r\n\r\nfunction extractYamlBlock(content: string): { yaml: string; body: string } | null {\r\n    if (!hasYamlFrontmatter(content)) return null;\r\n    const end = content.indexOf(\"\\n---\", 4);\r\n    if (end === -1) return null;\r\n\r\n    const closeIdx = end + \"\\n---\".length;\r\n    const after = content.indexOf(\"\\n\", closeIdx);\r\n    const yaml = content.slice(4, end + 1);\r\n    const body = after === -1 ? \"\" : content.slice(after + 1);\r\n    return { yaml, body };\r\n}\r\n\r\nfunction injectYamlField(yaml: string, key: string, value: string, overwriteIfBlank: boolean): { yaml: string; changed: boolean } {\r\n    const lines = yaml.split(\"\\n\");\r\n    const keyRE = new RegExp(`^%{escapeRegex(key)}\\\\s*:\\\\s*(.*)$`, \"i\");\r\n\r\n    let found = false;\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const m = lines[i].match(keyRE);\r\n        if (m) {\r\n            found = true;\r\n            const current = (m[1] ?? \"\").trim();\r\n            if (current === \"\" && overwriteIfBlank) {\r\n                lines[i] = `${key}: ${value}`;\r\n                return { yaml: lines.join(\"\\n\"), changed: true };\r\n            }\r\n            \r\n            return { yaml: lines.join(\"\\n\"), changed: false };\r\n        }\r\n    }\r\n\r\n    if (!found) {\r\n        let insertAt = 0;\r\n        while (insertAt < lines.length && lines[insertAt].trim().startsWith(\"#\")) insertAt++;\r\n        lines.splice(insertAt, 0, `${key}: ${value}`);\r\n        return { yaml: lines.join(\"\\n\"), changed: true };\r\n    }\r\n\r\n    return { yaml, changed: false };\r\n}\r\n\r\nfunction escapeRegex(s: string) {\r\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\n\r\n\r\nexport default class AutoUuidPlugin extends Plugin {\r\n    settings: AutoUuidSettings = { ...DEFAULT_SETTINGS };\r\n\r\n    async onload() {\r\n        await this.loadSettings();\r\n\r\n        this.addSettingTab(new AutoUuidSettingTab(this.app, this));\r\n\r\n        this.registerEvent(\r\n            this.app.vault.on(\"create\", async (file) => {\r\n                if (!(file instanceof TFile) || !isMarkdown(file)) return;\r\n\r\n                window.setTimeout(() => {\r\n                    this.ensureUuid(file). catch((err) => {\r\n                        console.error(\"[Auto UUID] Failed to set uuid:\", err);\r\n                        new Notice(\"Auto UUID: failed to add uuid (see console).\");\r\n                    });\r\n                }, this.settings.delayMs);\r\n            })\r\n        );\r\n    }\r\n\r\n    onunload() {\r\n\r\n    }\r\n\r\n    private async ensureUuid(file: TFile) {\r\n        const content = await this.app.vault.read(file);\r\n        const { fieldName } = this.settings;\r\n\r\n        if (!hasYamlFrontmatter(content)) {\r\n            const uuid = generateUuidV4();\r\n            const newContent = `---\\n${fieldName}: ${uuid}\\n---\\n\\n${content}`;\r\n            await this.app.vault.modify(file, newContent);\r\n            return;\r\n        }\r\n\r\n        const parts = extractYamlBlock(content);\r\n        if (!parts) {\r\n            const uuid = generateUuidV4();\r\n            const newContent = `---\\n${fieldName}: ${uuid}\\n---\\n\\n${content}`;\r\n            await this.app.vault.modify(file, newContent);\r\n            return;\r\n        }\r\n\r\n        const { yaml, body } = parts;\r\n        const uuid = generateUuidV4();\r\n        const injected = injectYamlField(yaml, fieldName, uuid, this.settings.overwriteIfBlank);\r\n\r\n        if (!injected.changed) return;\r\n\r\n        const newContent = `---\\n${injected.yaml}---\\n\\n${body}`;\r\n        await this.app.vault.modify(file, newContent);\r\n    }\r\n\r\n    async loadSettings() {\r\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\r\n    }\r\n\r\n    async saveSettings() {\r\n        await this.saveData(this.settings);\r\n    }\r\n}\r\n\r\nclass AutoUuidSettingTab extends PluginSettingTab {\r\n    plugin: AutoUuidPlugin;\r\n\r\n    constructor(app: App, plugin: AutoUuidPlugin) {\r\n        super(app, plugin);\r\n        this.plugin = plugin;\r\n    }\r\n\r\n    display(): void {\r\n        const { containerEl } = this;\r\n        containerEl.empty();\r\n\r\n        containerEl.createEl(\"h2\", { text: \"Auto UUID Frontmatter\" });\r\n\r\n        new Setting(containerEl)\r\n            .setName(\"YAML field name\")\r\n            .setDesc(\"Key to store the UUID under.\")\r\n            .addText((t) => {\r\n                t\r\n                    .setValue(this.plugin.settings.fieldName)\r\n                    .onChange(async (v) => {\r\n                        this.plugin.settings.fieldName = v.trim() || \"uuid\";\r\n                        await this.plugin.saveSettings();\r\n                    })\r\n            });\r\n\r\n        new Setting(containerEl)\r\n            .setName(\"Delay (ms)\")\r\n            .setDesc(\"Wait this long after file creation before injecting uuid\")\r\n            .addText((t) => {\r\n                t.setValue(String(this.plugin.settings.delayMs)).onChange(async (v) => {\r\n                    const n = Number(v);\r\n                    this.plugin.settings.delayMs = Number.isFinite(n) && n >= 0 ? n : DEFAULT_SETTINGS.delayMs;\r\n                    await this.plugin.saveSettings();\r\n                })\r\n            });\r\n\r\n        new Setting(containerEl)\r\n            .setName(\"Overwrite if blank\")\r\n            .setDesc(\"If the field exists, but is empty, fill it with a new UUID.\")\r\n            .addToggle((tg) => {\r\n                tg.setValue(this.plugin.settings.overwriteIfBlank).onChange(async (v) => {\r\n                    this.plugin.settings.overwriteIfBlank = v;\r\n                    await this.plugin.saveSettings();\r\n                })\r\n            });\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["uuid", "newContent"]
}
